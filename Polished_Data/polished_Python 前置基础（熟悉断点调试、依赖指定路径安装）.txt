大家下午好，欢迎参加书生·浦语大模型实战营第四期。本节课是实战零基础部分的Python全职基础课程。我是本节课的主讲人胡朝成。关于Python前置基础课程，建议大家以自学为主，通过阅读文档进行学习。在视频中，我将带领大家浏览文档及任务要求。

首先，我们将查看最核心的文档部分。接下来，我们直接在GitHub上查看我们的原始文档。文档共分为六个章节。第一章是Conda虚拟环境管理；第二章是使用pip安装Python第三方依赖；第三章是使用VS Code连接本地与远程开发机；第四章教授如何使用VS Code进行Python调试，并介绍各种断点；第五章介绍如何使用Python调用书生·浦语的API；第六章较为特殊，单独列出一个文件，简要罗列Python基础语法。

整个课程的核心目标是帮助大家熟悉开发环境，掌握Python环境与包的管理，以及Python调试流程。接下来，我们来看闯关任务。本期实战营Python关卡的闯关任务主要有两项。第一项是完成LeetCode上的383题，这是一道较简单的算法题，需提交通过LeetCode的截图及代码。第二项任务较为特殊，已在任务Markdown文件中说明：提供了一段调用书生·浦语API的示例代码，用于从非结构化文本中提取结构化JSON数据。该示例代码中存在一个小bug，会导致报错。请大家自行定位并修正错误，注意需填写自己的API Key，以熟悉使用Python调用书生·浦语API的过程。提交作业时，需附上第八个功能的图文笔记及修改后的代码。此外，还有一个可选任务，即使用pip将我们的包安装到指定目录。

回到我们的PPT，关于闯关任务的提交，有几点需要注意：在完成任务前，务必仔细阅读任务说明，避免遗漏；所有闯关作业均需以笔记形式提交，图文记录作业过程，并发布至知乎、GitHub等公开媒体。

以上就是我对本节课内容的全面介绍。接下来，我将带大家简要回顾Python调试流程。在开始前，请确认已安装Python插件，并配置好debug的launch.json配置文件，这些内容均在我们的文档中，操作较为简单，大家可按指引操作。我们提供的demo实现了一个累加函数，从start加到end，注意由于Python range函数特性，end是不包含的。

接下来，我们在第四行实现加法，并在此处设置一个普通断点。当然，在返回结果时也可设置一个断点。现在，我们启动第八个功能，可以看到控制台。最左边是“continue”，表示直接运行至下一个断点；第二个是“step over”，表示逐行运行代码但不进入当前行代码；“step into”则与“step over”类似，但当当前代码有嵌套调用时，会进入被调用的代码中。

请注意，保留以下专业术语的原有形式：InternLM, Lagent, MindSearch, LLamaIndex, OpenCompass, Xtuner, Multi-agent, 书生·浦语, InternVL2, transformer。如果有类似术语但书写错误，请修改为上述术语。
以下是润色后的文本，保持了专业术语的准确性，并使表达更加流畅自然：

在函数的详细信息中，您可以通过“step out”功能从嵌套函数中跳出。接下来，“restart”表示重启，而“stop”用于停止调试。好的，此时在调试界面的左侧，您可以看到当前的所有变量。这里显示的是局部变量，而全局变量则显示在另一部分。目前，我们的“start”值为1，“and”为10，“I”为1。由于尚未进行运算，结果显示为0。首先，我们运行一行代码。此时，“race”加1后变为1。好的，接下来我将直接跳过每一行，大家可以注意观察左侧变量的变化。运行完整个代码后，最终输出结果为45。除了普通断点外，我们还将介绍条件断点。创建条件断点的方法很简单：在创建断点时，右键点击并选择“添加条件断点”。这里有四种类型的条件断点：表达式、命中计数、日志消息和等待其他断点。在此不再详述。首先，我们来看表达式断点。当表达式的值为true时，它会触发断点。例如，若希望在循环的最后一步使“I”等于“N减一”时暂停，可在此处设置断点。好的，现在我们保存该断点并开始调试。可以看到，程序在此处暂停，此时“I”已等于9，这是循环的最后一步。若想使用命中计数技术，当该行代码被执行特定次数后，断点才会被触发，程序随之暂停。例如，若希望在执行五次后暂停，可以设置断点并运行调试，此时程序将在“I”等于5处暂停，这正是循环执行到第五步时的情况。最后一个条件断点是日志消息断点，更像是一个日志记录功能，您可以在此处记录并输出您希望显示的信息。例如，若希望在每次触发时输出当前的“I”值，可以在此处进行设置。请注意，大括号内的内容将被Python解释器解析，您可以引用Python代码中的值。好的，接下来我们运行调试。可以看到，虽然程序已完整运行，但日志消息的输出不在终端中，而是在调试控制台中显示。可以看到，它输出了完整的1到9。最后，我们将演示如何使用Python调用书生浦语的API。这里我使用了OpenAI的SDK进行调用，主要是展示如何通过环境变量配置API密钥，以最大限度地避免API密钥泄露的风险。我已经复制好了API密钥，通过以下代码行创建环境变量：
```bash
export API_KEY=your_token_here
```
此时，API密钥已配置完成。由于这种方法仅对当前终端有效，因此我们必须在当前终端中运行Python代码。

注意：保留 InternLM, Lagent, MindSearch, LLamaIndex, OpenCompass, Xtuner, Multi-agent, 书生浦语, InternVL2, transformer 等专业术语的原有形式。如果有类似这样的术语形式，但书写错误，请修改为上述术语。
从运行结果来看，操作成功，我们已经获得了模型的一个输出。

请注意：请保留以下专业术语的准确性：InternLM, Lagent, MindSearch, LLamaIndex, OpenCompass, Xtuner, Multi-agent, 书生浦语, InternVL2, transformer。如果存在类似的术语但书写错误，请根据上述术语进行更正。